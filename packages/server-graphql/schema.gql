# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddPersonAttributeInput {
  id: ID!
  content: JSONObject
  issuedDate: Float
  expiresDate: Date
  expired: Boolean
  certifierID: String
}

type Attribute {
  id: ID!
  content: JSONObject
  issuedDate: Float
  expiresDate: Date
  expired: Boolean
  certifierID: String
}

"""Date custom scalar type"""
scalar Date

input GetByAttributeInput {
  id: String!
  content: JSONObject
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input LoginPersonInput {
  username: String!
  password: String!
}

type Mutation {
  addRecipe(newRecipeData: NewRecipeInput!): Recipe!
  removeRecipe(id: String!): Boolean!
  personNew(newPersonData: NewPersonInput!): Person!
  personAddAttribute(addPersonAttributeData: AddPersonAttributeInput!, personId: String!): Person!
  personLogin(loginPersonData: LoginPersonInput!): String!
  participantNew(newParticipantData: NewParticipantInput!): Participant!
}

input NewParticipantInput {
  id: String!
  name: String!
}

input NewPersonInput {
  id: String!
  firstname: String!
  lastname: String!
  username: String!
  password: String!
  email: String!
}

input NewRecipeInput {
  title: String!
  description: String
  ingredients: [String!]!
}

type Participant {
  id: ID!
  name: String!
  msp: String!
  identities: [x509Identities!]!
}

type Person {
  id: ID!
  firstname: String!
  lastname: String!
  username: String!
  email: String!
  attributes: [Attribute!]
  roles: [String!]
  participant: Participant!
}

type Query {
  recipe(id: String!): Recipe!
  recipes(skip: Int = 0, take: Int = 25): [Recipe!]!
  personById(id: String!): Person!
  personByUsername(username: String!): Person!
  persons(skip: Int = 0, take: Int = 25): [Person!]!
  personByAttribute(skip: Int = 0, take: Int = 25, getByAttributeInput: GetByAttributeInput!): [Person!]!
  participantById(id: String!): Participant!
  participants(skip: Int = 0, take: Int = 25): [Participant!]!
}

type Recipe {
  id: ID!
  title: String!
  description: String
  creationDate: Date!
  ingredients: [String!]!
}

type Subscription {
  recipeAdded: Recipe!
  personAdded: Person!
  personLogged: String!
  participantAdded: Participant!
}

type x509Identities {
  id: ID
  status: Boolean!
  fingerprint: String!
}
